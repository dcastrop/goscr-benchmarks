module ring;

(*# NestedProtocols #*)

nested protocol Forward(role S, role E; new role RingNode) {
    msg(msg:string, hops:int) from S to RingNode;
    choice at RingNode {
        RingNode calls Forward(RingNode, E);
    } or {
        msg(msg:string, hops:int) from RingNode to E;
    }
}

global protocol Ring(role Start, role End) {
    choice at Start {
        Start calls Forward(Start, End);
        msg(msg:string, hops:int) from End to Start;
    } or {
        msg(msg:string, hops:int) from Start to End;
        msg(msg:string, hops:int) from End to Start;
    }
}